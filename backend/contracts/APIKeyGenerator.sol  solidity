// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

/**
 * @title Bwaezi-Compatible API Key Generator
 * @dev Generates and manages API keys with Bwaezi Chain integration
 */
contract APIKeyGenerator is Ownable {
    using Strings for uint256;
    
    struct APIKey {
        address user;
        string key;
        uint256 createdAt;
        uint256 expiresAt;
        bool isActive;
        uint256 bwaeziCost;
        uint256 usageCount;
    }
    
    mapping(string => APIKey) public apiKeys;
    mapping(address => string[]) public userKeys;
    
    uint256 public keyPriceBwaezi = 10 * 10**18; // 10 BWAEZI
    uint256 public keyValidityPeriod = 365 days;
    
    event APIKeyGenerated(address indexed user, string key, uint256 bwaeziCost);
    event APIKeyRevoked(address indexed user, string key);
    event APIKeyUsed(address indexed user, string key, uint256 newUsageCount);
    
    /**
     * @dev Generate a new API key paid with BWAEZI
     */
    function generateKeyWithBwaezi(address user) external returns (string memory) {
        require(msg.sender == owner() || msg.sender == user, "Not authorized");
        
        string memory newKey = _generateUniqueKey();
        uint256 expiration = block.timestamp + keyValidityPeriod;
        
        apiKeys[newKey] = APIKey({
            user: user,
            key: newKey,
            createdAt: block.timestamp,
            expiresAt: expiration,
            isActive: true,
            bwaeziCost: keyPriceBwaezi,
            usageCount: 0
        });
        
        userKeys[user].push(newKey);
        
        emit APIKeyGenerated(user, newKey, keyPriceBwaezi);
        return newKey;
    }
    
    /**
     * @dev Verify API key validity
     */
    function verifyKey(string memory key) external view returns (bool) {
        APIKey memory apiKey = apiKeys[key];
        return apiKey.isActive && 
               apiKey.expiresAt > block.timestamp &&
               apiKey.user != address(0);
    }
    
    /**
     * @dev Track API key usage
     */
    function trackUsage(string memory key) external {
        require(verifyKey(key), "Invalid or expired API key");
        apiKeys[key].usageCount++;
        emit APIKeyUsed(apiKeys[key].user, key, apiKeys[key].usageCount);
    }
    
    /**
     * @dev Set BWAEZI price for API keys
     */
    function setBwaeziPrice(uint256 newPrice) external onlyOwner {
        keyPriceBwaezi = newPrice;
    }
    
    /**
     * @dev Generate unique API key
     */
    function _generateUniqueKey() internal view returns (string memory) {
        return string(abi.encodePacked(
            "bwz_",
            Strings.toHexString(uint160(msg.sender), 20),
            "_",
            Strings.toString(block.timestamp),
            "_",
            Strings.toString(uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), block.timestamp))) % 10000)
        ));
    }
    
    /**
     * @dev Get user's API keys
     */
    function getUserKeys(address user) external view returns (string[] memory) {
        return userKeys[user];
    }
    
    /**
     * @dev Revoke API key
     */
    function revokeKey(string memory key) external {
        APIKey storage apiKey = apiKeys[key];
        require(apiKey.user == msg.sender || msg.sender == owner(), "Not authorized");
        apiKey.isActive = false;
        emit APIKeyRevoked(apiKey.user, key);
    }
}
