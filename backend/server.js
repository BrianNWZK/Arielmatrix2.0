// =========================================================================
// ArielMatrix Server: Core Autonomous Revenue System
// =========================================================================

import express from 'express';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';
import cors from 'cors';
import crypto from 'crypto';
import { ethers } from 'ethers';
import cron from 'node-cron';
import Mutex from 'async-mutex'; // FIX: Changed to default import
import 'dotenv/config';

// --- Import all agents ---
import PayoutAgent from './agents/payoutAgent.js';
import * as healthAgent from './agents/healthAgent.js';
import * as configAgent from './agents/configAgent.js';
import * as shopifyAgent from './agents/shopifyAgent.js';

// --- Configuration ---
const CONFIG = {
Â  Â  // Other configurations (e.g., API keys) are now loaded from .env
Â  Â  PAYOUT_THRESHOLD_USD: process.env.PAYOUT_THRESHOLD_USD || 500,
Â  Â  SMART_CONTRACT_ADDRESS: process.env.SMART_CONTRACT_ADDRESS,
Â  Â  MASTER_PRIVATE_KEY: process.env.MASTER_PRIVATE_KEY,
Â  Â  RPC_URL: process.env.RPC_URL,
Â  Â  REVENUE_DISTRIBUTOR_ABI: JSON.parse(process.env.REVENUE_DISTRIBUTOR_ABI || '[]'),
Â  Â  // ... other config variables
Â  Â  CYCLE_INTERVAL: 600000,
Â  Â  HEALTH_REPORT_INTERVAL: 12,
Â  Â  DASHBOARD_UPDATE_INTERVAL: 5000,
};

// --- Enhanced Logger ---
const logger = {
Â  Â  info: (...args) => console.log(`[${new Date().toISOString()}] INFO:`, ...args),
Â  Â  warn: (...args) => console.warn(`[${new Date().toISOString()}] WARN:`, ...args),
Â  Â  error: (...args) => console.error(`[${new Date().toISOString()}] ERROR:`, ...args),
Â  Â  success: (...args) => console.log(`[${new Date().toISOString()}] SUCCESS:`, ...args),
Â  Â  debug: (...args) => { if (process.env.NODE_ENV === 'development') console.log(`[${new Date().toISOString()}] DEBUG:`, ...args); }
};

// --- WebSocket Setup ---
const connectedClients = new Set();
function broadcastDashboardUpdate() {
Â  Â  const update = {
Â  Â  Â  Â  timestamp: new Date().toISOString(),
Â  Â  Â  Â  status: getSystemStatus(),
Â  Â  Â  Â  // Removed local revenue tracking
Â  Â  Â  Â  agents: getAgentActivities(),
Â  Â  };
Â  Â  const message = JSON.stringify({ type: 'update', data: update });
Â  Â  connectedClients.forEach(client => {
Â  Â  Â  Â  if (client.readyState === 1) {
Â  Â  Â  Â  Â  Â  client.send(message);
Â  Â  Â  Â  }
Â  Â  });
}

// --- Global Error Handlers ---
process.on('unhandledRejection', (reason, promise) => {
Â  Â  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
Â  Â  logger.error('Uncaught Exception:', error);
Â  Â  process.exit(1);
});

// --- Tracking Variables ---
const agentActivityLog = [];
let lastCycleStats = {};
let lastCycleStart = 0;
let isRunning = false;
const cycleMutex = new Mutex();

// --- Payout Agent Initialization (The new one-key system) ---
const payoutAgentInstance = new PayoutAgent(CONFIG, logger);

// --- Main System ---
async function runAutonomousRevenueSystem() {
Â  Â  if (cycleMutex.isLocked()) {
Â  Â  Â  Â  logger.warn('Cycle already in progress. Skipping this scheduled run.');
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  await cycleMutex.runExclusive(async () => {
Â  Â  Â  Â  const cycleStart = Date.now();
Â  Â  Â  Â  const cycleStats = {
Â  Â  Â  Â  Â  Â  startTime: new Date().toISOString(),
Â  Â  Â  Â  Â  Â  success: false,
Â  Â  Â  Â  Â  Â  duration: 0,
Â  Â  Â  Â  Â  Â  activities: [],
Â  Â  Â  Â  };

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  // Health Agent Check
Â  Â  Â  Â  Â  Â  const healthActivity = { agent: 'health', action: 'start', timestamp: new Date().toISOString() };
Â  Â  Â  Â  Â  Â  agentActivityLog.push(healthActivity);
Â  Â  Â  Â  Â  Â  cycleStats.activities.push(healthActivity);
Â  Â  Â  Â  Â  Â  const healthResult = await healthAgent.run(CONFIG, logger);
Â  Â  Â  Â  Â  Â  healthActivity.action = 'completed';
Â  Â  Â  Â  Â  Â  healthActivity.status = healthResult.status;

Â  Â  Â  Â  Â  Â  if (healthResult.status !== 'optimal') {
Â  Â  Â  Â  Â  Â  Â  Â  logger.error(`ðŸš¨ System health check failed. Skipping autonomous cycle.`);
Â  Â  Â  Â  Â  Â  Â  Â  throw new Error('System health check failed. Cycle aborted.');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  logger.success('âœ… System health is optimal. Proceeding with the cycle.');

Â  Â  Â  Â  Â  Â  // --- DECENTRALIZED REVENUE COLLECTION (API-DRIVEN) ---
Â  Â  Â  Â  Â  Â  // This is where you would call each platform-specific agent to get revenue
Â  Â  Â  Â  Â  Â  // and have them call the `reportRevenue()` function on your smart contract.
Â  Â  Â  Â  Â  Â  // Example:
Â  Â  Â  Â  Â  Â  // const shopifyResult = await shopifyAgent.run(CONFIG, logger);
Â  Â  Â  Â  Â  Â  // ... then your agent would handle calling the smart contract.
Â  Â  Â  Â  Â  Â  // The result would be a boolean or tx hash, not a monetary value to be stored locally.

Â  Â  Â  Â  Â  Â  // Run Payout Agent (The core of the system)
Â  Â  Â  Â  Â  Â  const payoutActivity = { agent: 'payout', action: 'start', timestamp: new Date().toISOString() };
Â  Â  Â  Â  Â  Â  agentActivityLog.push(payoutActivity);
Â  Â  Â  Â  Â  Â  cycleStats.activities.push(payoutActivity);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Initialize the payout agent with the master key.
Â  Â  Â  Â  Â  Â  if (!payoutAgentInstance.wallet) {
Â  Â  Â  Â  Â  Â  Â  Â  await payoutAgentInstance.init();
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  // Run the payout agent to check the smart contract and distribute funds if the threshold is met.
Â  Â  Â  Â  Â  Â  const payoutResult = await payoutAgentInstance.run();
Â  Â  Â  Â  Â  Â  payoutActivity.action = 'completed';
Â  Â  Â  Â  Â  Â  payoutActivity.status = payoutResult?.status || 'success';
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  cycleStats.success = true;
Â  Â  Â  Â  Â  Â  return { success: true, message: 'Cycle completed' };

Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  cycleStats.success = false;
Â  Â  Â  Â  Â  Â  logger.error('Error during autonomous revenue cycle:', error);
Â  Â  Â  Â  Â  Â  return { success: false, error: error.message };
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  cycleStats.duration = Date.now() - cycleStart;
Â  Â  Â  Â  Â  Â  lastCycleStats = cycleStats;
Â  Â  Â  Â  Â  Â  broadcastDashboardUpdate();
Â  Â  Â  Â  }
Â  Â  });
}

// --- Dashboard Functions ---
function getSystemStatus() {
Â  Â  return {
Â  Â  Â  Â  status: cycleMutex.isLocked() ? 'operational' : 'idle',
Â  Â  Â  Â  uptime: process.uptime(),
Â  Â  Â  Â  lastCycle: lastCycleStats,
Â  Â  Â  Â  memoryUsage: process.memoryUsage(),
Â  Â  };
}

function getAgentActivities() {
Â  Â  return {
Â  Â  Â  Â  recentActivities: agentActivityLog.slice(-50).reverse(),
Â  Â  Â  Â  agentStatus: {
Â  Â  Â  Â  Â  Â  // Updated to reflect the new, simplified agents
Â  Â  Â  Â  Â  Â  payoutAgent: payoutAgentInstance.getStatus?.(),
Â  Â  Â  Â  Â  Â  healthAgent: healthAgent.getStatus?.(),
Â  Â  Â  Â  Â  Â  configAgent: configAgent.getStatus?.(),
Â  Â  Â  Â  Â  Â  // Other agents would be listed here
Â  Â  Â  Â  }
Â  Â  };
}

// --- Express Server Setup ---
const app = express();
const server = createServer(app);
const PORT = process.env.PORT || 10000;

// Create WebSocket server
const wss = new WebSocketServer({ server });

wss.on('connection', (ws) => {
Â  Â  connectedClients.add(ws);
Â  Â  ws.send(JSON.stringify({
Â  Â  Â  Â  type: 'init',
Â  Â  Â  Â  data: {
Â  Â  Â  Â  Â  Â  status: getSystemStatus(),
Â  Â  Â  Â  Â  Â  agents: getAgentActivities()
Â  Â  Â  Â  }
Â  Â  }));
Â  Â  ws.on('close', () => connectedClients.delete(ws));
Â  Â  ws.on('error', (error) => {
Â  Â  Â  Â  logger.error('WebSocket error:', error);
Â  Â  Â  Â  connectedClients.delete(ws);
Â  Â  });
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// API Endpoints
app.post('/api/start-revenue-system', async (req, res) => {
Â  Â  if (cycleMutex.isLocked()) {
Â  Â  Â  Â  return res.status(409).json({ success: false, message: 'System already running' });
Â  Â  }
Â  Â  const result = await runAutonomousRevenueSystem();
Â  Â  res.status(result.success ? 200 : 500).json(result);
});

// NEW: Endpoint to manually trigger a payout
app.post('/api/trigger-payout', async (req, res) => {
Â  Â  logger.info('Manual payout trigger requested.');
Â  Â  if (!payoutAgentInstance.wallet) {
Â  Â  Â  Â  await payoutAgentInstance.init();
Â  Â  }
Â  Â  try {
Â  Â  Â  Â  const result = await payoutAgentInstance.run();
Â  Â  Â  Â  if (result.status === 'success') {
Â  Â  Â  Â  Â  Â  res.status(200).json({ success: true, message: 'Payout process initiated successfully.' });
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  res.status(400).json({ success: false, message: 'Payout trigger failed.', details: result.message });
Â  Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  Â  logger.error('Manual payout failed:', error);
Â  Â  Â  Â  res.status(500).json({ success: false, message: 'An internal error occurred during the payout process.', error: error.message });
Â  Â  } finally {
Â  Â  Â  Â  broadcastDashboardUpdate();
Â  Â  }
});

app.get('/api/health', (req, res) => res.json(getSystemStatus()));
app.get('/api/dashboard/status', (req, res) => res.json(getSystemStatus()));
app.get('/api/dashboard/agents', (req, res) => res.json(getAgentActivities()));

// Schedule periodic operations using node-cron
cron.schedule('*/10 * * * *', () => {
Â  Â  runAutonomousRevenueSystem().catch(err => {
Â  Â  Â  Â  logger.error('Scheduled operation failed:', err);
Â  Â  });
});

// Start Server
server.listen(PORT, () => {
Â  Â  logger.success(`Server running on port ${PORT} with WebSocket support`);
Â  Â  payoutAgentInstance.init().then(() => {
Â  Â  Â  Â  if (process.env.NODE_ENV !== 'test') {
Â  Â  Â  Â  Â  Â  Â runAutonomousRevenueSystem();
Â  Â  Â  Â  }
Â  Â  });
});
