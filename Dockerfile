syntax=docker/dockerfile:1.4Builder stage: A robust build environment for all build tasks.FROM node:22.16.0 AS arielmatrix_builder=== SYSTEM DEPENDENCY GUARANTEE ===RUN apt-get update && apt-get install -y libnss3 libx11-xcb1 libxcomposite1 libxdamage1 libxi6 libxtst6 libatk-bridge2.0-0 libgtk-3-0 libgbm-dev libasound2 fonts-noto python3 python3-pip python3-venv build-essential sqlite3 libsqlite3-dev git curl && rm -rf /var/lib/apt/lists/* && apt-get cleanWORKDIR /app=== PACKAGE.JSON GUARANTEE & DEPENDENCY RESOLUTION ===Copy only the necessary files for the initial build to leverage caching.COPY package*.json ./COPY backend/package*.json ./backend/COPY frontend/package*.json ./frontend/Build backend dependenciesWORKDIR /app/backendRUN npm install --prefer-offline --no-audit --ignore-optionalBuild frontend dependenciesWORKDIR /app/frontendRUN npm install --prefer-offline --no-auditCopy the rest of the application source code.COPY . .Build the frontend assets. This is done after copying all files to prevent cache busting.RUN npm run buildRebuild native modules for the backendWORKDIR /appRUN if npm list @tensorflow/tfjs-node >/dev/null 2>&1; then npm rebuild @tensorflow/tfjs-node --build-from-source; fiRUN if npm list better-sqlite3 >/dev/null 2>&1; then npm rebuild better-sqlite3 --build-from-source; fiInstall Python dependenciesRUN if [ -f "requirements.txt" ]; then pip3 install -r requirements.txt --break-system-packages; fiConfigure HardhatRUN if [ -f "hardhat.config.js" ]; then npm install -g hardhat && npm install @nomicfoundation/hardhat-toolbox @openzeppelin/contracts; fiEnsure scripts are executable, a failsafe for the shell commands in the JS.RUN chmod -R +x scripts/*.sh || true=== Runtime stage: A lightweight container for the final application. ===FROM node:22.16.0-slim AS arielmatrix_runtime=== SYSTEM DEPENDENCY GUARANTEE ===RUN apt-get update && apt-get install -y libnss3 libx11-xcb1 libxcomposite1 libxdamage1 libxi6 libxtst6 libatk-bridge2.0-0 libgtk-3-0 libgbm-dev libasound2 fonts-noto python3 sqlite3 curl && rm -rf /var/lib/apt/lists/* && apt-get cleanWORKDIR /appCopy the built application from the builder stageCOPY --from=arielmatrix_builder /app /appEnsure correct permissionsRUN chown -R node:node /appUSER node=== AUTONOMOUS AI ENVIRONMENT SETUP ===ENV NODE_ENV=productionENV AUTONOMOUS_AI=trueENV QUANTUM_MODE=enabled=== EXPOSE PORT & HEALTHCHECK ===EXPOSE 3000HEALTHCHECK --interval=15s --timeout=10s --start-period=5s --retries=5 CMD curl -f http://localhost:3000/health || exit 1=== QUANTUM ENTRYPOINT ===ENTRYPOINT ["node", "/app/scripts/quantum-entrypoint.js"]
